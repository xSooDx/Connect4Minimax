//make slope a class variable of type int
//make fourInARow a class variable of type bool
/*I have a doubt in line 76,this is what it is in the py file
 if self.players[0].color.lower() == self.board[row][col].lower():
what is .color
 */
#include<string>
void Game::checkForFours()
{
    int i,j;
    bool diag_fours=false;
    string slope;
    for(i=0;i<6;i++)
    {
        for(j=0;j<7;j++)
        {
            if (board[i][j]!= ' ')
            {
                if(verticalCheck(i,j))
                {
                    finished = true;
                    break;
                }
                if(horizontalCheck(i,j))
                {
                    finished = true;
                    break;
                }
                diagonalCheck();
                if(fourInARow)
                {
                    cout<<slope;
                    finished = true;
                    break;
                }

            }
        }
    }
}

bool Game::verticalCheck(int row,int col)
{
    fourInARow = false;
    consecutiveCount = 0;
    int i;
    for(i=row;i<6;i++)
    {
        if(tolower(board[i][col])==tolower(board[row][col]))
            consecutiveCount +=1;
        else:
            break;
    }
    if (consecutiveCount>=4)
    {
        fourInARow = true;
        if(tolower(players[0])==tolower(board[row][col]))
            winner = players[0];
        else
            winner = players[1];
    }

    bool Game::verticalCheck(int row,int col)
{
    fourInARow = false;
    consecutiveCount = 0;
    int i;
    for(i=row;i<6;i++)
    {
        if(tolower(board[i][col])==tolower(board[row][col]))
            consecutiveCount +=1;
        else:
            break;
    }
    if (consecutiveCount>=4)

    return fourInARow;
}

bool Game::horizontalCheck(int row,int col)
{
    fourInARow = false;
    consecutiveCount = 0;
    int j;
    for(j=col;j<7;j++)
    {
        if(tolower(board[row][j])==tolower(board[row][col]))
            consecutiveCount +=1;
        else:
            break;
    }
    if (consecutiveCount>=4)
    {
        fourInARow = true;
        if(tolower(players[0])==tolower(board[row][col]))// ask sood or orun
            winner = players[0];
        else
            winner = players[1];
    }
    return fourInARow;
}

void Game::diagonalCheck(int row,int col)
{
    fourInARow = false;
    int count = 0;
    slope = -1;
    int consecutiveCount = 0;
    int i;
    int j = col;
    for(i=0;i<6;i++)
    {
        if(j>6)
        {
            break;
        }
        else if(tolower(board[i][j])==tolower(board[row][col]))
            consecutiveCount += 1;
        else
            break;
        j += 1;
    }
    if(consecutiveCount<=4)
    {
        count += 1;
        slope = 2;//'positive'
        if(tolower(players[0])==tolower(board[row][col]))
            winner = players[0];
        else
            winner = players[1];
    }
    consecutiveCount = 0;
    j = col;
    for(i=row;i>-1;i-=1)
    {
        if(j>6)
            break;
        else if(tolower(board[i][j])==tolower(board[row][col]))
            consecutiveCount += 1;
        else
            break;
        j += 1;
    }
    if(consecutiveCount<=4)
    {
        count += 1;
        slope = 3;//'negative'
        if(tolower(players[0])==tolower(board[row][col]))
            winner = players[0];
        else
            winner = players[1];
    }
    if(count>0)
        fourInARow = true;
    if(count==2)
        slope = 4;//'both'
}

void Game::findFours()
{
    int i,j;
    for(i=0;i<6;i++)
    {
        for(j=0;j<7;j++)
        {
            if(board[i][j]!=' ')
            {
                if(verticalCheck(i,j))
                {
                    slope = -1;
                    highlightFour(i,j,10,slope)//10 is 'vertical'
                }
                if(horizontalCheck(i,j))
                {
                    slope = -1;
                    highlightFour(i,j,11,slope)//11 is 'horizontal'
                }
                diagonalCheck(i,j);
                if(fourInARow)
                    highlightFour(i,j,12,slope)//12 is 'diagonal'
            }
        }
    }
}

void Game::highlightFour(int row,int col ,int direction,int sl)
{
    int i;
    if(direction==10)
    {
        for(i=0;i<4;i++)
            board[row+i][col] = toupper(board[row+i][col]);
    }
    else if(direction==11)
    {
        for(i=0;i<4;i++)
            board[row][col+i] = toupper(board[row][col+i]);
    }
    else if(direction==12)
    {
        if(slope==2||slope==4)
        {
            for(i=0;i<4;i++)
                board[row+i][col+i] = toupper(board[row+i][col+i]);
        }
        else if(slope==3||slope==4)
        {
            for(i=0;i<4;i++)
                board[row-i][col+i] = toupper(board[row-i][col+i]);
        }
    }
    else
        cout<<"Error";
}
